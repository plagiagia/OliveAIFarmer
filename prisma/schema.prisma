// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User management
model User {
  id        String   @id @default(cuid())
  clerkId   String   @unique // Clerk user ID
  email     String   @unique
  firstName String
  lastName  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // User's farms
  farms Farm[]

  @@map("users")
}

// Farm/Olive Grove
model Farm {
  id          String   @id @default(cuid())
  name        String   // e.g., "Ελαιώνας Μεσσηνίας"
  location    String   // e.g., "Καλαμάτα, Μεσσηνία"
  coordinates String?  // GPS coordinates (optional)
  totalArea   Float?   // Total farm area in stremmata (στρέμματα)
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Owner
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Farm sections and trees
  sections OliveSection[]
  trees    OliveTree[]
  
  // Activities and harvests
  activities Activity[]
  harvests   Harvest[]

  @@map("farms")
}

// Sections within a farm for better organization
model OliveSection {
  id          String   @id @default(cuid())
  name        String   // e.g., "Βόρειο Τμήμα", "Νότιο Τμήμα"
  area        Float?   // Area in stremmata (στρέμματα)
  soilType    String?  // e.g., "Αργιλώδες", "Αμμώδες"
  elevation   Int?     // Elevation in meters
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Parent farm
  farmId String
  farm   Farm   @relation(fields: [farmId], references: [id], onDelete: Cascade)

  // Trees in this section
  trees OliveTree[]

  @@map("olive_sections")
}

// Individual olive trees
model OliveTree {
  id           String         @id @default(cuid())
  treeNumber   String         // Unique identifier within farm
  variety      String         // e.g., "Κορωνέικη", "Καλαμών"
  plantingYear Int?           // Year planted
  age          Int?           // Tree age in years
  health       TreeHealth     @default(HEALTHY)
  status       TreeStatus     @default(ACTIVE)
  coordinates  String?        // GPS coordinates
  notes        String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  // Parent farm and section
  farmId    String
  farm      Farm          @relation(fields: [farmId], references: [id], onDelete: Cascade)
  sectionId String?
  section   OliveSection? @relation(fields: [sectionId], references: [id], onDelete: SetNull)

  // Tree activities and harvests
  treeActivities TreeActivity[]
  treeHarvests   TreeHarvest[]

  @@unique([farmId, treeNumber])
  @@map("olive_trees")
}

// Farm activities (watering, pruning, fertilizing, etc.)
model Activity {
  id           String       @id @default(cuid())
  type         ActivityType
  title        String       // e.g., "Πότισμα Βόρειου Τμήματος"
  description  String?
  date         DateTime
  duration     Int?         // Duration in minutes
  cost         Float?       // Cost in euros
  weather      String?      // Weather conditions
  notes        String?
  completed    Boolean      @default(false)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  // Parent farm
  farmId String
  farm   Farm   @relation(fields: [farmId], references: [id], onDelete: Cascade)

  // Individual tree activities
  treeActivities TreeActivity[]

  @@map("activities")
}

// Individual tree activities (for specific trees)
model TreeActivity {
  id String @id @default(cuid())

  // Parent activity and tree
  activityId String
  activity   Activity  @relation(fields: [activityId], references: [id], onDelete: Cascade)
  treeId     String
  tree       OliveTree @relation(fields: [treeId], references: [id], onDelete: Cascade)

  // Tree-specific notes
  notes     String?
  createdAt DateTime @default(now())

  @@unique([activityId, treeId])
  @@map("tree_activities")
}

// Harvest records
model Harvest {
  id               String    @id @default(cuid())
  year             Int       // Harvest year
  startDate        DateTime
  endDate          DateTime?
  totalYield       Float?    // Total yield in kg
  qualityGrade     String?   // e.g., "Εξαιρετικό", "Καλό"
  oilExtracted     Float?    // Liters of oil extracted
  oilYieldPercent  Float?    // Oil yield percentage
  notes            String?
  completed        Boolean   @default(false)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // Parent farm
  farmId String
  farm   Farm   @relation(fields: [farmId], references: [id], onDelete: Cascade)

  // Individual tree harvests
  treeHarvests TreeHarvest[]

  @@unique([farmId, year])
  @@map("harvests")
}

// Individual tree harvest data
model TreeHarvest {
  id           String    @id @default(cuid())
  yield        Float     // Yield in kg for this tree
  quality      String?   // Quality assessment
  harvestDate  DateTime
  notes        String?
  createdAt    DateTime  @default(now())

  // Parent harvest and tree
  harvestId String
  harvest   Harvest   @relation(fields: [harvestId], references: [id], onDelete: Cascade)
  treeId    String
  tree      OliveTree @relation(fields: [treeId], references: [id], onDelete: Cascade)

  @@unique([harvestId, treeId])
  @@map("tree_harvests")
}

// Enums
enum TreeHealth {
  EXCELLENT // Εξαιρετική
  GOOD      // Καλή
  HEALTHY   // Υγιής
  FAIR      // Μέτρια
  POOR      // Κακή
  DISEASED  // Άρρωστο
}

enum TreeStatus {
  ACTIVE    // Ενεργό
  INACTIVE  // Ανενεργό
  REMOVED   // Αφαιρέθηκε
  REPLANTED // Επανακαλλιέργεια
}

enum ActivityType {
  WATERING      // Πότισμα
  PRUNING       // Κλάδεμα
  FERTILIZING   // Λίπανση
  PEST_CONTROL  // Έλεγχος Παρασίτων
  SOIL_WORK     // Εργασίες Εδάφους
  HARVESTING    // Συγκομιδή
  MAINTENANCE   // Συντήρηση
  INSPECTION    // Επιθεώρηση
  OTHER         // Άλλο
}
